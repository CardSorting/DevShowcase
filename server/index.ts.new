import express, { Request, Response, NextFunction } from "express";
import cookieParser from "cookie-parser";
import path from "path";
import fs from "fs";
import { log, setupVite, serveStatic } from "./vite";
import { registerRoutes } from "./routes";
import { setupAuth } from "./replitAuth";
import "dotenv/config";

// Create Express app
const app = express();

// Parse cookies and request bodies
app.use(cookieParser());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Create uploads directory if it doesn't exist
const uploadsDir = path.join(process.cwd(), "uploads");
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// Create projects directory if it doesn't exist
const projectsDir = path.join(process.cwd(), "projects");
if (!fs.existsSync(projectsDir)) {
  fs.mkdirSync(projectsDir, { recursive: true });
}

// Serve uploaded projects
app.use("/projects", express.static(path.join(process.cwd(), "projects")));

// Set up session and auth
export async function start() {
  try {
    // Set up routes and get the HTTP server
    const server = await registerRoutes(app);

    // Add error handler
    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
      console.error("Express error:", err);
      res.status(500).json({
        message: err.message || "An unexpected error occurred",
      });
    });

    // Setup Vite and static file serving in dev/prod environments
    if (process.env.NODE_ENV === "development") {
      await setupVite(app, server);
    } else {
      serveStatic(app);
    }

    // Start server
    const PORT = process.env.PORT || 5000;
    server.listen(PORT, () => {
      log(`serving on port ${PORT}`);
    });
  } catch (error) {
    console.error("Failed to start server:", error);
    process.exit(1);
  }
}

start();